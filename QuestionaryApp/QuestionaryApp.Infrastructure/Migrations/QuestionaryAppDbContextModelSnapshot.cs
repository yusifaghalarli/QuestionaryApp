// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuestionaryApp.Infrastructure.Data.Context;

namespace QuestionaryApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(QuestionaryAppDbContext))]
    partial class QuestionaryAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuestionaryApp.Core.Domain.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("QuestionaryApp.Core.Domain.Choice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Choices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 7, 15, 12, 17, 46, 403, DateTimeKind.Utc).AddTicks(5833),
                            QuestionId = 1,
                            Text = "6"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2021, 7, 15, 12, 17, 46, 403, DateTimeKind.Utc).AddTicks(7360),
                            QuestionId = 1,
                            Text = "9"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2021, 7, 15, 12, 17, 46, 403, DateTimeKind.Utc).AddTicks(7364),
                            QuestionId = 1,
                            Text = "12"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2021, 7, 15, 12, 17, 46, 403, DateTimeKind.Utc).AddTicks(7365),
                            QuestionId = 2,
                            Text = "11"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2021, 7, 15, 12, 17, 46, 403, DateTimeKind.Utc).AddTicks(7366),
                            QuestionId = 2,
                            Text = "15"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2021, 7, 15, 12, 17, 46, 403, DateTimeKind.Utc).AddTicks(7369),
                            QuestionId = 2,
                            Text = "17"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2021, 7, 15, 12, 17, 46, 403, DateTimeKind.Utc).AddTicks(7370),
                            QuestionId = 3,
                            Text = "8-20"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2021, 7, 15, 12, 17, 46, 403, DateTimeKind.Utc).AddTicks(7371),
                            QuestionId = 3,
                            Text = "21-45"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2021, 7, 15, 12, 17, 46, 403, DateTimeKind.Utc).AddTicks(7372),
                            QuestionId = 3,
                            Text = "45-70"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2021, 7, 15, 12, 17, 46, 403, DateTimeKind.Utc).AddTicks(7373),
                            QuestionId = 3,
                            Text = "70+"
                        });
                });

            modelBuilder.Entity("QuestionaryApp.Core.Domain.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasMultiSelect")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 7, 15, 12, 17, 46, 403, DateTimeKind.Utc).AddTicks(7937),
                            HasMultiSelect = true,
                            Text = "3+3?"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2021, 7, 15, 12, 17, 46, 404, DateTimeKind.Utc).AddTicks(6680),
                            HasMultiSelect = true,
                            Text = "7+4?"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2021, 7, 15, 12, 17, 46, 404, DateTimeKind.Utc).AddTicks(6751),
                            HasMultiSelect = true,
                            Text = "How old are you?"
                        });
                });

            modelBuilder.Entity("QuestionaryApp.Core.Domain.SelectedChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("ChoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.ToTable("SelectedChoice");
                });

            modelBuilder.Entity("QuestionaryApp.Core.Domain.Answer", b =>
                {
                    b.HasOne("QuestionaryApp.Core.Domain.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionaryApp.Core.Domain.Choice", b =>
                {
                    b.HasOne("QuestionaryApp.Core.Domain.Question", null)
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionaryApp.Core.Domain.SelectedChoice", b =>
                {
                    b.HasOne("QuestionaryApp.Core.Domain.Answer", null)
                        .WithMany("SeletedChoices")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionaryApp.Core.Domain.Answer", b =>
                {
                    b.Navigation("SeletedChoices");
                });

            modelBuilder.Entity("QuestionaryApp.Core.Domain.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Choices");
                });
#pragma warning restore 612, 618
        }
    }
}
